---
title: "Bayesian Data Analysis"
subtitle: "Just Another Gibbs Sampler (JAGS)"
author: "Dr Niamh Cahill (she/her)"
format: revealjs
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
```

## Just Another Gibbs Sampler - JAGS {style="font-size: 70%;"}

-   JAGS is a system that automatically builds Markov chain Monte Carlo (MCMC) samplers for Bayesian Models. It was developed by Martin Plummer.

-   JAGS takes a user's description of a Bayesian model and returns an MCMC sample of the posterior distribution for the monitored parameters.

-   It's very easy to implement (m)any Bayesian models as long as you can write down the model specification. The user does not need to worry about the MCMC algorithm (you just have to check MCMC output for convergence/mixing).

-   Conveniently, there are R packages that let users run JAGS from R.

-   As a simple example we've considered the estimation of a Binomial probability (with the happiness example). Now we'll implement this simple example using JAGS.

## How to use JAGS? {style="font-size: 70%;"}

1.  Install JAGS and the R packages rjags and R2jags.

2.  Minimum things to do:

```{=html}
<!-- -->
```
i.  Write down your model specification and its corresponding JAGS model.
ii. Specify data list and the names of the parameters for which you want to save the posterior samples.
iii. GO: Run JAGS!
iv. Get the posterior MCMC samples and use those for further analysis.

## Step 1 - Model Specification {style="font-size: 70%;"}

Recall for the Happiness example out of n = 20 women, y = 14 women reported being happy.

::: columns
::: {.column width="50%"}
-   Model specification (data model and priors): \begin{align*}
     y|\theta &\sim   Binomial(\theta, N = 20) \\
     \theta &\sim Be(1,1)\\
     \end{align*}
:::

::: {.column width="50%"}
-   JAGS model specification:

```{r, echo = TRUE, include=TRUE}
#| code-line-numbers: "4-5|7-8|1,2,9,10"

binomialmodel = "
model{

 # data model (likelihood)
 	y ~ dbinom(theta, N) 
 
 # prior
 theta ~ dbeta(1, 1) 
 }
 "
```
:::
:::

## Step 2 - JAGS Data {style="font-size: 70%;"}

::: columns
::: {.column width="50%"}
-   JAGS model specification:

```{r, echo = TRUE, include=TRUE}
#| code-line-numbers: "1-10|4-5|7-8"

binomialmodel = "
model{

 # data model (likelihood)
 	y ~ dbinom(theta, N) 
 
 # prior
 theta ~ dbeta(1, 1) 
 }
 "
```
:::

::: {.column width="50%"}
-   Input data:

```{r, echo = TRUE, include=TRUE}
#| code-line-numbers: "|1-2"

jags.data <- list(y = 14, 
                  N = 20)
```

-   Specify the names of the parameters for which you want to save the posterior samples:

```{r, echo = TRUE, include=TRUE}
#| code-line-numbers: "1"

parnames <- c("theta")
```
:::
:::

## Step 3 - Run JAGS {style="font-size: 70%;"}

```{r,echo = TRUE}
library(rjags)
library(R2jags)
mod <- jags(data = jags.data, 
            parameters.to.save = parnames, 
            model.file = textConnection(binomialmodel))
```

-   By default, JAGS runs 3 chains with 2,000 iterations per chain of which 1,000 iterations are excluded as burnin.

## Step 4 - Output {style="font-size: 70%;"}

-   MCMC samples can be obtained as follows:

```{r, echo = TRUE}
mcmc.array <- mod$BUGSoutput$sims.array
mcmc.array %>% dim() 
```

where the dimension of the mcmc.array is given by niterations x nchains x (nparameters+deviance).

```{r, echo = TRUE}
mcmc.list <- mod$BUGSoutput$sims.list
mcmc.list$theta %>% dim()
```

```{r, echo = TRUE}
mcmc.matrix <- mod$BUGSoutput$sims.matrix
mcmc.matrix %>% dim()
```

-   We can also get output summaries

```{r, echo = TRUE}
mod$BUGSoutput$summary
```

## More on outout - basics {style="font-size: 70%;"}

::: panel-tabset
### Quick view

```{r, echo = TRUE, include=TRUE, fig.height=10}
#| code-line-numbers: ""
#| output-location: column-fragment

## plot output (quick plot)
plot(mod)
```

### Parameter inference

```{r, echo = TRUE, include=TRUE}
#| code-line-numbers: ""
#| output-location: column-fragment

## look at parameters
theta_s <- mcmc.list$theta

# plot
plot(theta_s, type = "l")
```

```{r, echo = TRUE, include=TRUE}
#| code-line-numbers: ""
#| output-location: column-fragment

# plot
plot(density(theta_s))
```

```{r, echo = TRUE, include=TRUE}
#| code-line-numbers: ""
#| output-location: column-fragment

# get quantiles
quantile(theta_s, probs=c(0.025,0.5, 0.975))
```
:::

## Trace plots and density plots with the coda package {style="font-size: 70%;"}

Here's some useful functions from the `coda` package.

```{r, echo = TRUE}
library(coda)

# turn the model into an mcmc object
mod_mcmc <- as.mcmc(mod)

# get trace plot and density
plot(mod_mcmc) 
```

## Autocorrelation plots {style="font-size: 70%;"}

```{r, echo = TRUE}

autocorr.plot(mod_mcmc) # get autocorrelation plot
```

<!-- ## More on Output {style="font-size: 70%;"} -->

<!-- ```{r, echo = TRUE} -->

<!-- effectiveSize(mod_mcmc) # get ESS -->

<!-- gelman.diag(mod_mcmc) # get Rhat -->

<!-- ``` -->

## Tidybayes {style="font-size: 70%;"}

[The tidybayes package](http://mjskay.github.io/tidybayes/articles/tidybayes.html) facilitates the use of tidy data (one observation per row) with Bayesian models in R.

-   You can use the output from JAGS in matrix format to work with tidybayes

-   The spread_draws function lets us extract draws into a data frame in tidy format

```{r, echo = TRUE, include=TRUE}
#| code-line-numbers: ""
#| output-location: column-fragment

library(tidybayes)

## look at samples for individual parameters (similar to sims.list but puts it in a tibble)
mcmc.matrix <- mod$BUGSoutput$sims.matrix
mcmc.matrix %>% spread_draws(theta) 
```

## Tidybayes {style="font-size: 70%;"}

-   tidybayes provides a family of functions for generating point summaries and intervals from draws in a tidy format. These functions follow the naming scheme \[median\|mean\|mode\]\_\[qi\|hdi\], for example, median_qi, mean_qi, mode_hdi, and so on.

```{r, echo = TRUE, include=TRUE}
#| code-line-numbers: ""

## summary for parameters
mcmc.matrix %>% 
  gather_rvars(theta) %>% 
  median_qi(.value, .width = c(.95,0.9))
```

-   The ggdist::stat_halfeye() geom provides a shortcut to generating “half-eye plots” (combinations of intervals and densities).

```{r, echo = TRUE, include=TRUE}
#| code-line-numbers: ""
#| output-location: column-fragment

## plots
mcmc.matrix %>%
  spread_draws(theta) %>% 
  ggplot(aes(x = theta)) +
  stat_halfeye()
```


## Another Happiness Example {style="font-size: 70%;"}

Assume we have survey data from 5 countries related to the happiness of women aged 65+ and we want to compare the proportions accross countries. 

```{r}
# Set seed for reproducibility
set.seed(42)

# Parameters
countries <- c('Germany', 'France', 'Italy', 'Spain', 'Netherlands')
total_surveyed <- c(200, 150, 180, 170, 160)  # Total surveyed in each country
happiness_probs <- c(0.75, 0.60, 0.70, 0.65, 0.80)  # Probability of being happy in each country

# Generating binomial data
# N is the total surveyed, Y is the number reporting being happy
Y <- rbinom(length(countries), total_surveyed, happiness_probs)

# Creating the data frame
survey_data <- data.frame(Country = countries, N = total_surveyed, Y = Y)
knitr::kable(survey_data)
#saveRDS(survey_data, "happiness_survey.rds")
```

::: columns
::: {.column width="50%"}
-   Model specification (data model and priors): \begin{align*}
     y_i|\theta_i &\sim   Binomial(\theta_i, N_i) \\
     \theta_i &\sim Be(1,1)\\
     \end{align*}
:::

::: {.column width="50%"}
-   JAGS model specification:

```{r, echo = TRUE, include=TRUE}
#| code-line-numbers: "5-6|8-9|3,10|1,2,11,12"

binomialmodel = "
model{
 for(i in 1:n_country)
{
 # data model (likelihood)
 	y[i] ~ dbinom(theta[i], N[i]) 
 	
 # prior
 theta[i] ~ dbeta(1, 1) 
}
 }
 "

```
:::
:::


## Another Happiness Example: Rcode {style="font-size: 70%;"}

```{r, echo = TRUE, include=TRUE, eval = FALSE}
jags.data <- list(y = survey_data$Y, 
                  N = survey_data$N,
                  n_country = length(survey_data$Country))
parnames <- c("theta")

library(rjags)
library(R2jags)
mod <- jags(data = jags.data, 
            parameters.to.save = parnames, 
            model.file = textConnection(binomialmodel))
```


```{r, echo = TRUE, include=TRUE, eval = FALSE}
## quick look output
mod_mcmc <- as.mcmc(mod)
mod$BUGSoutput$summary
plot(mod_mcmc)

## tidybayes outptut
library(tidybayes)
mcmc.matrix <- mod$BUGSoutput$sims.matrix
country <- survey_data$Country

## summary
mcmc.matrix %>%
  spread_draws(theta[country]) %>% 
  summarise_draws() 

## plot
mcmc.matrix %>%
  spread_draws(theta[country]) %>% 
  ggplot(aes(y = factor(country, labels = survey_data$Country), x = theta)) +
  stat_halfeye() +
  ylab("")
```

